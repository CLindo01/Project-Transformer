import arcpy
import csv
import tkinter as tk
from tkinter import filedialog
# List of columns from Node file that will be written into the new excel file.
# The names must be exactly the same as the headers for the table. 
ArcGIS_Node_Field_Names = ["OBJECTID", "INITIAL_STG", "TYPE", "NAME"]
# List of column headers for the new csv file (to be imported into ICPR4)
ICPR_Node_Field_Names = ["ID", "ParentID", "Name", "Type", "BaseFlow", "InitialStage", "WarningStage",
                         "BoundaryStage", "Comment", "ShapeX", "ShapeY", "ShapeZ", "TextX", "TextY",
                         "TextZ", "TextAngle", "IsPlaced"]
# This gets the node file which is uploaded in the parameters tab.
    # Param0 also acts as the address of the file so the program knows
    # where to access the data.
param0 = arcpy.GetParameter(0)
arcpy.env.workspace = param0
# Main function
def script_tool(param0):
    """Script code goes below"""
    return
# Main if statement
if __name__ == "__main__":
    root = tk.Tk()
    root.withdraw()  # Hide the root window
    folder_path = filedialog.asksaveasfilename(filetypes=[("Text files", "*.txt"), ("All files", "*.*")])
    if folder_path:
        print("Selected file for saving:", folder_path)
        try:
            os.makedirs(folder_path)
            print(f"Empty folder created at {folder_path}")
        except FileExistsError:
            print(f"Folder at {folder_path} already exists.")
    # Node_path = folder_path + "/_Node"
    # print(Node_path)
        with open(folder_path + "/_Node.csv", 'w', newline='') as csv_file:
            csv_writer = csv.writer(csv_file)
            csv_writer.writerow(ICPR_Node_Field_Names)
    
            # The 'with statement' below starts the process of scanning all the date from the Nodes file.
            # The 'try statemnt' checks to see if a geoclass feature has been inputed into Param0. If there is
            # no inputed table, the statement addresses any errors that would show up and creates a table that is
            # empty, but still compatible with ICPR4. Essentially, this allows the user to run the script without
            # having to submit a Node file for input.
            try:
                with arcpy.da.SearchCursor(param0, ArcGIS_Node_Field_Names) as cursor:
                    # This creates an empty list which will be filled with data
                    # for each node. The data will be added to the csv at the
                    # bottom of the for loop.
                    Node = []       
        
        
                # This loop goes through all the rows of the specified columns
                # and copies their data into the Node list.
                    for row in cursor:
                        # Each of the append statements adds a different element to the Node list
                        # Some will be taken from the ArcGIS files, and some will be hardcoded in.
                        
                        Node.append(row[0]) # Adds ID 
                        Node.append("{1E0A83D4-6F20-49F7-8831-0A7A575DD822}") # Adds ParentID
                        Node.append(row[3]) # Adds NAME
                        Node.append(row[2]) # Adds TYPE
                        Node.append(0) # Adds BaseFlow
                        Node.append(row[1]) # Adds InitialStage
                        Node.append(0) # Adds WarningStage
                        Node.append('') # Adds BoundaryStage
                        Node.append('')                 # Comment
                        Node.append(0)    # ShapeX
                        Node.append(0)    # ShapeY
                        Node.append(0)    # ShapeZ
                        Node.append(3.3)                 # TextX
                        Node.append(3.3)                 # TextY
                        Node.append(0)                 # TextZ
                        Node.append(0)                 # TextAngle
                        Node.append(1)                 # IsPlaced
                    
                        # At this point, the Node list is full of data for a single Node.
                        # The next line then writes the data into the csv
                        
                        csv_writer.writerow(Node)
                        # Now that the data has been written in, the Node list is
                        # erased, creating a new blank list for the next Node in the
                        # for loop. 
                        Node = []
                                
            # These except and finally statements serve no purpose other
            # than to close off the try statement above. 
            except AttributeError:
                print('error')
            except RuntimeError:
                print('error')
            finally:
                print('complete')
            #Upon completion of this script, the csv file is closed off and saved.
    
       
    with open(folder_path + "/_Link.csv", 'w', newline='') as csv_file:
        csv_writer = csv.writer(csv_file)
        
    # Khang's code goes here.
    
            
    with open(folder_path + "/_Pipe_Param.csv", 'w', newline='') as csv_file:
        csv_writer = csv.writer(csv_file)

    # Tony and Christian's code goes here.
    
